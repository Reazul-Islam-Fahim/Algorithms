

package Prims_algo;

import java.util.*;

class Edge {
  int targetNode;
  int distanceFromNode;
  
  Edge(int targetNode, int distance) {
    this.targetNode = targetNode;
    this.distanceFromNode = distance;
  }
}

class Graph {
  List<List<Edge>> graph;
  boolean visited[];
  int nodes;

  Graph(int nodes) {
    graph = new ArrayList<>();
    visited = new boolean[nodes];
    this.nodes = nodes;

    for (int i = 0; i < nodes; i++) {
      graph.add(i, new ArrayList<>());
    }
  }

  public void addEdge(int sourceNode, int targetNode, int distance) {
    graph.get(sourceNode).add(new Edge(targetNode, distance));
    graph.get(targetNode).add(new Edge(sourceNode, distance));
  }
  
  public int mst() {
    int minCost = 0;
    
    for(int i = 0; i < nodes; i++) {
      if(!visited[i]) {
        minCost = minCost + minSpanTreeGraph(i);
      }
    }
    
    return minCost;
  }

  public int minSpanTreeGraph(int source) {

    PriorityQueue<Edge> minEdgeHeap = new PriorityQueue<>((e1, e2) -> e1.distanceFromNode - e2.distanceFromNode);

    visited[source] = true;
    List<Edge> childOfSource = graph.get(source);
    
    for(Edge edge: childOfSource) {
      minEdgeHeap.add(edge);
    }
    
    int minimumCost = 0;
    while (!minEdgeHeap.isEmpty()) {

      Edge minValueEdge = minEdgeHeap.poll();

      if (visited[minValueEdge.targetNode]) {
        continue;
      }

      visited[minValueEdge.targetNode] = true;
      
      minimumCost = minimumCost + minValueEdge.distanceFromNode;

      List<Edge> childList = graph.get(minValueEdge.targetNode);
      
      for (Edge edge : childList) {
        if (!visited[edge.targetNode]) {
          minEdgeHeap.add(edge);
        }
      }
    }

    return minimumCost;
  }
}


public class prims_algo
{

  public static void main(String[] args) {
    int nodes;
        System.out.print("Enter number of vertices: ");
        Scanner input=new Scanner(System.in);
        nodes=input.nextInt();
        System.out.println();

    Graph a = new Graph(nodes);

    System.out.print("Enter number of edges: ");
        int edge=input.nextInt();
        System.out.println();
        
        System.out.println("Enter Edges: ");
    for(int i=0;i<edge;i++)
        {
            int n,m,d;
            n=input.nextInt();
            m=input.nextInt();
            d=input.nextInt();
            a.addEdge(n,m,d);
        }
    
    System.out.println(a.mst());
  }
}
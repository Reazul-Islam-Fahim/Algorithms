package DP;
/*
Topic: Longest Increasing Subsequence (Dynamic Programming)
 */
import java.util.Arrays;
import java.util.Scanner;

public class LIS 
{
    public static void main(String[] args)
    {
        //Input Section
        Scanner input = new Scanner(System.in);
        int n,i,j;
        System.out.print("Enter the number of elements: ");
        n = input.nextInt();
        int[] a = new int[n];
        System.out.print("Enter the array elements: ");
        for(i=0;i<n;i++)
        {
            a[i] =input.nextInt();
        }
        //Initialising lengths and sequence array
        int[] lengths = new int[n];
        Arrays.fill(lengths, 1);
        int[] sequence = new int[n];
        Arrays.fill(sequence, Integer.MIN_VALUE);
        //Searching Longest Increasing Subsequence
        int maxLength = 1;
        int maxLengthIndex = 0;
        for(i=1;i<n;i++)
        {
            for(j=0;j<i;j++)
            {
                if(a[j]<a[i] && lengths[j]+1 >= lengths[i])
                {
                    lengths[i] = lengths[j]+1;
                    sequence[i] = j;
                    if(lengths[i]>=maxLength)
                    {
                        maxLength = lengths[i];
                        maxLengthIndex = i;
                    }
                }
            }
        }
        //Finding the LIS array elements
        int[] LIS = new int[maxLength];
        i = maxLength - 1;
        while(maxLengthIndex != Integer.MIN_VALUE)
        {
            LIS[i] = a[maxLengthIndex];
            maxLengthIndex = sequence[maxLengthIndex];
            i--;
        }
        //Printing Result
System.out.println("Size of the longest increasing subsequence is: "+maxLength);
        System.out.print("Elements of LIS are:");
        for(i=0;i<maxLength;i++)
        {
            System.out.print(LIS[i]+" ");
        }
        System.out.println();
    }  
}

